// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using RizSoft.MtbSchool.Domain.Models;

namespace RizSoft.MtbSchool.Services;

public partial class MtbSchoolContext : DbContext
{
    public MtbSchoolContext(DbContextOptions<MtbSchoolContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Course> Courses { get; set; }

    public virtual DbSet<CourseEdition> CourseEditions { get; set; }

    public virtual DbSet<Page> Pages { get; set; }

    public virtual DbSet<Participant> Participants { get; set; }

    public virtual DbSet<Photo> Photos { get; set; }

    public virtual DbSet<PhotoGallery> PhotoGalleries { get; set; }

    public virtual DbSet<Tour> Tours { get; set; }

    public virtual DbSet<TourParticipant> TourParticipants { get; set; }

    public virtual DbSet<Trainer> Trainers { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Course>(entity =>
        {
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255);

            entity.HasOne(d => d.PhotoGallery).WithMany(p => p.Courses)
                .HasForeignKey(d => d.PhotoGalleryId)
                .HasConstraintName("FK_Courses_PhotoGalleries");
        });

        modelBuilder.Entity<CourseEdition>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Instructions).IsRequired();
            entity.Property(e => e.Locality)
                .IsRequired()
                .HasMaxLength(100);

            entity.HasOne(d => d.Course).WithMany(p => p.CourseEditions)
                .HasForeignKey(d => d.CourseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CourseEditions_Courses");

            entity.HasOne(d => d.PhotoGallery).WithMany(p => p.CourseEditions)
                .HasForeignKey(d => d.PhotoGalleryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CourseEditions_PhotoGalleries");

            entity.HasMany(d => d.Participants).WithMany(p => p.Courses)
                .UsingEntity<Dictionary<string, object>>(
                    "CourseEditionParticipant",
                    r => r.HasOne<Participant>().WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CourseEditionParticipants_Participants"),
                    l => l.HasOne<CourseEdition>().WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CourseEditionParticipants_CourseEditions"),
                    j =>
                    {
                        j.HasKey("CourseId", "ParticipantId");
                        j.ToTable("CourseEditionParticipants");
                    });

            entity.HasMany(d => d.Trainers).WithMany(p => p.Courses)
                .UsingEntity<Dictionary<string, object>>(
                    "CourseEditionTrainer",
                    r => r.HasOne<Trainer>().WithMany()
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CourseEditionTrainers_Trainers"),
                    l => l.HasOne<CourseEdition>().WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CourseEditionTrainers_CourseEditions"),
                    j =>
                    {
                        j.HasKey("CourseId", "TrainerId");
                        j.ToTable("CourseEditionTrainers");
                    });
        });

        modelBuilder.Entity<Page>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_be_Pages");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.DateModified).HasColumnType("datetime");
            entity.Property(e => e.Slug).HasMaxLength(255);
            entity.Property(e => e.Title).HasMaxLength(255);

            entity.HasOne(d => d.PhotoGallery).WithMany(p => p.Pages)
                .HasForeignKey(d => d.PhotoGalleryId)
                .HasConstraintName("FK_Pages_PhotoGalleries");
        });

        modelBuilder.Entity<Participant>(entity =>
        {
            entity.Property(e => e.Address).HasMaxLength(50);
            entity.Property(e => e.City).HasMaxLength(50);
            entity.Property(e => e.CountryId)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.DateOfBirth).HasPrecision(0);
            entity.Property(e => e.Email).HasMaxLength(255);
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Language)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.MobilePhone)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Phone)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PostalCode)
                .HasMaxLength(5)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Photo>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("tabPhotos_PK");

            entity.Property(e => e.Caption).HasMaxLength(1024);
            entity.Property(e => e.Filename).HasMaxLength(50);
            entity.Property(e => e.LinkTitle).HasMaxLength(100);
            entity.Property(e => e.LinkUrl).HasMaxLength(255);

            entity.HasOne(d => d.PhotoGallery).WithMany(p => p.Photos)
                .HasForeignKey(d => d.PhotoGalleryId)
                .HasConstraintName("FK_Photos_PhotoGalleries");
        });

        modelBuilder.Entity<PhotoGallery>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("tabPhotoGalleries_PK");

            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(4000);
            entity.Property(e => e.Slug)
                .HasMaxLength(4000)
                .HasComputedColumnSql("(lower(replace(substring([Url],(8),len([Url])-(8)),'/','-')))", false);
            entity.Property(e => e.Thumbnail).HasMaxLength(50);
            entity.Property(e => e.Title).HasMaxLength(100);
            entity.Property(e => e.Url).HasMaxLength(200);
        });

        modelBuilder.Entity<Tour>(entity =>
        {
            entity.Property(e => e.AvgHr).HasColumnName("AvgHR");
            entity.Property(e => e.AvgSpeed).HasColumnType("decimal(4, 1)");
            entity.Property(e => e.AvgTemperature).HasColumnType("decimal(4, 1)");
            entity.Property(e => e.Comment).IsUnicode(false);
            entity.Property(e => e.Distance).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.ElapsedTime).HasPrecision(0);
            entity.Property(e => e.ExternalUrl)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Flow).HasColumnType("decimal(4, 1)");
            entity.Property(e => e.GarminId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("GarminID");
            entity.Property(e => e.GpxFile)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Grit).HasColumnType("decimal(4, 1)");
            entity.Property(e => e.IdActivityType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("idActivityType");
            entity.Property(e => e.IsOnline).HasColumnName("isOnline");
            entity.Property(e => e.KomootId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("KomootID");
            entity.Property(e => e.MaxHr).HasColumnName("MaxHR");
            entity.Property(e => e.MaxSpeed).HasColumnType("decimal(4, 1)");
            entity.Property(e => e.MaxTemperature).HasColumnType("decimal(4, 1)");
            entity.Property(e => e.MinTemperature).HasColumnType("decimal(4, 1)");
            entity.Property(e => e.MovingTime).HasPrecision(0);
            entity.Property(e => e.OutdooractiveId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OutdooractiveID");
            entity.Property(e => e.ReliveId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ReliveID");
            entity.Property(e => e.Slug)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Source)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.StartTime).HasPrecision(0);
            entity.Property(e => e.StravaId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("StravaID");
            entity.Property(e => e.Tags)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.TotalTime).HasPrecision(0);
            entity.Property(e => e.TourDate).HasColumnType("date");
            entity.Property(e => e.TourFinderId).HasColumnName("TourFinderID");
            entity.Property(e => e.TourTitle)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.TrailforksId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TrailforksID");
            entity.Property(e => e.YoutubeId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("YoutubeID");

            entity.HasOne(d => d.PhotoGallery).WithMany(p => p.Tours)
                .HasForeignKey(d => d.PhotoGalleryId)
                .HasConstraintName("FK_Tours_PhotoGalleries");
        });

        modelBuilder.Entity<TourParticipant>(entity =>
        {
            entity.HasKey(e => new { e.TourId, e.ParticipantId });

            entity.HasOne(d => d.Tour).WithMany(p => p.TourParticipants)
                .HasForeignKey(d => d.TourId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TourParticipants_Participants");

            entity.HasOne(d => d.TourNavigation).WithMany(p => p.TourParticipants)
                .HasForeignKey(d => d.TourId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TourParticipants_Tours");
        });

        modelBuilder.Entity<Trainer>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Email).HasMaxLength(128);
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Grade).HasMaxLength(255);
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Phone)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Photo).HasColumnType("image");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}